@function decimal-round ($number, $digits: 0, $mode: round) {
	$n: 1;
	// $number must be a number
	@if type-of($number) != number
	{
		@warn '#{ $number } is not a number.';
		@return $number;
	}
	// $digits must be a unitless number
	@if type-of($digits) != number
	{
		@warn '#{ $digits } is not a number.';
		@return $number;
	}
	@else if not unitless($digits)
	{
		@warn '#{ $digits } has a unit.';
		@return $number;
	}

	@for $i from 1 through $digits
	{
		$n: $n * 10;
	}

	@if $mode == round
	{
		@return round($number * $n) / $n;
	}
	@else if $mode == ceil
	{
		@return ceil($number * $n) / $n;
	}
	@else if $mode == floor
	{
		@return floor($number * $n) / $n;
	}
	@else
	{
		@warn '#{ $mode } is undefined keyword.';
		@return $number;
	}
}
/// Map deep get
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function mapDeepGet($map, $keys...)
{
	@each $key in $keys
	{
		$map: map-get($map, $key);
	}
	@return $map;
}
@function getColValue( $value, $columns:12, $gridSize:flex )
{
	@if $gridSize == flex
	{
		@return 0% + decimal-round( ( $value * 100 / $columns ), 1, floor );
	}
	@else
	{
		@return 0rem + decimal-round( ( $value * $gridSize / $columns ), 1, floor );
	}
}
@mixin compassGrid ( $compassGrid )
{
	$compassGrid:() !default;
	$prefix: mapDeepGet($compassGrid, "name");
	$prefix: "c" !default;

	$columns: mapDeepGet($compassGrid, "columns");
	$columns: 12 !default;

	$gridSize: mapDeepGet($compassGrid, "gridSize");
	$gridSize: flex !default;

	$debug: mapDeepGet($compassGrid, "debug");
	$debug: false !default;

	$gutters: mapDeepGet($compassGrid, "gutters");
	$gutters: 0.5rem !default;

	$breakpoints: mapDeepGet($compassGrid, "breakpoints");
	$breakpoints: false !default;

	$outputMod: mapDeepGet($compassGrid, "outputMod");
	$outputMod: css !default;

	@if $outputMod == css
	{
		$compassGridCharr: "."!global;
	}
	@else
	{
		$compassGridCharr: "%"!global;
	}
	#{$compassGridCharr}compassHtmlColModel, #{$compassGridCharr}compassHtmlColAutoModel{
		overflow: hidden;
		position: relative;
		display: block;
		float: left;
		max-width: 100%;
		@include clearfix();
		#{$compassGridCharr}content{
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			overflow: hidden;
			margin: $gutters;
		}
	}
	#{$compassGridCharr}compassHtmlColAutoModel{
		#{$compassGridCharr}content{
			position: relative;
			display: block;
			overflow: hidden;
			margin: $gutters;
		}
	}
	@for $it1 from 1 through $columns
	{
		#{$compassGridCharr}compassHtmlColModelAuto#{$prefix}-#{$it1}
		{
			@extend #{$compassGridCharr}compassHtmlColAutoModel;
			width: getColValue( $it1, $columns, $gridSize );
		}
		#{$compassGridCharr}compassHtmlColModelW#{$prefix}-#{$it1}
		{
			@extend #{$compassGridCharr}compassHtmlColModel;
			width: getColValue( $it1, $columns, $gridSize );
		}
		
		#{$compassGridCharr}compassHtmlColModelH#{$prefix}-#{$it1}
		{
			padding-top: getColValue( $it1, $columns, $gridSize );
		}
		@for $it2 from 1 through $columns
		{
			@if $it2 == 1		
			{
				.#{$prefix}-#{$it1}
				{
					@extend #{$compassGridCharr}compassHtmlColModelAuto#{$prefix}-#{$it1};
				}

			}
			.#{$prefix}-#{$it1}-#{$it2}
			{
				@extend #{$compassGridCharr}compassHtmlColModelW#{$prefix}-#{$it1};
				@extend #{$compassGridCharr}compassHtmlColModelH#{$prefix}-#{$it2};
			}
			
			@if $breakpoints != false
			{
				@each $breakpoint, $breakpointValue in $breakpoints
				{				
					@if $it2 == 1		
					{
						#{$compassGridCharr}#{$prefix}-#{$breakpoint}-#{$it1}
						{
							@extend #{$compassGridCharr}compassHtmlColAutoModel;
						}
					}
					#{$compassGridCharr}#{$prefix}-#{$breakpoint}-#{$it1}-#{$it2}
					{
						@extend #{$compassGridCharr}compassHtmlColModel;
					}
				}
			}
		}
	}
	// clean css generation
	@if $breakpoints != false
	{
		@each $breakpoint, $breakpointValue in $breakpoints
		{
			@media(max-width: $breakpointValue)
			{
				@for $it1 from 1 through $columns
				{
					#{$compassGridCharr}compassHtmlColModelAuto#{$prefix}-#{$breakpoint}-#{$it1}
					{
						width: getColValue( $it1, $columns, $gridSize );
					}
					#{$compassGridCharr}compassHtmlColModelW#{$prefix}-#{$breakpoint}-#{$it1}
					{
						width: getColValue( $it1, $columns, $gridSize );
					}
					#{$compassGridCharr}compassHtmlColModelH#{$prefix}-#{$breakpoint}-#{$it1}
					{
						padding-top: getColValue( $it1, $columns, $gridSize );
					}

					@for $it2 from 1 through $columns
					{
						@if $it2 == 1		
						{
							#{$compassGridCharr}#{$prefix}-#{$breakpoint}-#{$it1}
							{
								@extend #{$compassGridCharr}compassHtmlColModelAuto#{$prefix}-#{$breakpoint}-#{$it1};
							}
						}
						#{$compassGridCharr}#{$prefix}-#{$breakpoint}-#{$it1}-#{$it2}
						{
							@extend #{$compassGridCharr}compassHtmlColModelW#{$prefix}-#{$breakpoint}-#{$it1};
							@extend #{$compassGridCharr}compassHtmlColModelH#{$prefix}-#{$breakpoint}-#{$it2};
						}
					}
				}
			}
		}
	}
}